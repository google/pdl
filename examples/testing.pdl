
// packet BASIC_StaticArray {
//     array: 16[4],
// }

// packet BASIC_ArrayWithSizeField {
//     _size_(array): 8,
//     array: 16[],
// }

// packet BASIC_ArrayWithCountField {
//     _count_(array): 8,
//     array: 16[],
// }

// packet BASIC_ArrayThatFillsPacket {
//     array: 16[],
// }

// enum MyEnum : 16 {
//     A = 1,
//     B = 2,
//     C = 4,
// }

// packet ENUM_StaticArray {
//     array: MyEnum[4],
// }

// packet ENUM_ArrayWithSizeField {
//     _size_(array): 8,
//     array: MyEnum[],
// }

// packet ENUM_ArrayWithCountField {
//     _count_(array): 8,
//     array: MyEnum[],
// }

// struct MyStruct {
//     a: 32,
// }

// packet STRUCT_StaticArray {
//     array: MyStruct[4],
// }

// packet STRUCT_ArrayWithCountField {
//     _count_(array): 8,
//     array: MyStruct[],
// }

// packet TestPacket {
//     pizza: 7,
//     crust: 9,
//     lettuce: 4,
//     sausage: 4,
// }

// packet MALIGNED_StaticArray {
//     array: 24[4],
// }

// packet parent_with_array {
//     _size_(array): 8,
//     array: 16[],
//     _payload_,
// }

// packet child_of_parent_with_array : parent_with_array {
//     myfield: 8,
// }


// TODO: there is a bug here, width of ChildStructField is only 32 bits when it should be 40
// struct a_mostly_static_parent {
//     parent_field: 8,
//     _payload_,
// }

// struct a_static_child : a_mostly_static_parent {
//     child_field: 16,
// }

// packet ChildStructField {
//     static_field: 16,
//     struct_field: a_static_child,
// }


// struct a_mostly_static_parent {
//     parent_field: 8,
//     _payload_,
// }

// struct a_static_child : a_mostly_static_parent {
//     _reserved_: 13,
//     child_field: 51,
// }

// packet ChildStructField {
//     _size_(array): 8,
//     array: a_static_child[],
// }


// TOOD: Aligner bugged in this case
// packet this_is_failing {
//     field_1: 13,
//     field_2: 51,
// }

// packet should_fail {
//     field_a: 63,
//     field_b: 2,
//     field_c: 7,
// }


// 8
// 16
// 24 = 16 + 8
// 32
// 40 = 32 + 8
// 48 = 32 + 16
// 56 = 32 + 16 + 8
// 64


// this should rechunk to (32, 8). Field b will be entirely contained in the first chunk
// packet size_40_1 {
//     a: 9,
//     b: 1,
//     c: 21,
//     d: 9,
// }

// this should rechunk to (32, 16, 8). The second chunk will be entirely contained within field a
// packet size_56_1 {
//     a: 56,
// }

// packet size_40_3 {
//     a: 31,
//     b: 9,
// }

// packet Coffee {
//   a: 1,
//   b: 15,
//   c: 3,
//   d: 5,
// }

little_endian_packets

struct UnsizedStruct {
    _size_(array): 2,
    _reserved_: 6,
    array: 8[],
}

packet Packet_Array_Field_UnsizedElement_ConstantSize {
    array: UnsizedStruct[4],
}

packet Packet_Array_Field_UnsizedElement_VariableSize {
    _size_(array) : 4,
    _reserved_: 4,
    array: UnsizedStruct[],
}

packet Packet_Array_Field_UnsizedElement_VariableCount {
    _count_(array) : 4,
    _reserved_: 4,
    array: UnsizedStruct[],
}

packet Packet_Array_Field_UnsizedElement_UnknownSize {
    array: UnsizedStruct[],
}